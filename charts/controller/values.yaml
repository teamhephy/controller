org: "hephy"
pull_policy: "IfNotPresent"
docker_tag: v2.22.0
app_pull_policy: "Always"
# A comma-separated list of URLs to send app release information to
# See https://deis.com/docs/workflow/managing-workflow/deploy-hooks
deploy_hook_urls: ""
# limits_cpu: "100m"
# limits_memory: "50Mi"
# Possible values are:
# enabled - allows for open registration
# disabled - turns off open registration
# admin_only - allows for registration by an admin only.
registration_mode: "admin_only"
# Option to disable ssl verification to connect to k8s api server
k8s_api_verify_tls: "true"
# The public resolvable hostname to build your cluster with.
#
# This will be the hostname that is used to build endpoints such as "deis.$HOSTNAME"
platform_domain: ""
# Set a value for ingressClassName, if IngressClass is needed.
ingress_class: ""

global:
  # Set the storage backend
  #
  # Valid values are:
  # - s3: Store persistent data in AWS S3 (configure in S3 section)
  # - azure: Store persistent data in Azure's object storage
  # - gcs: Store persistent data in Google Cloud Storage
  # - minio: Store persistent data on in-cluster Minio server
  storage: minio
  # Set the location of Workflow's PostgreSQL database
  #
  # Valid values are:
  # - on-cluster: Run PostgreSQL within the Kubernetes cluster (credentials are generated
  #   automatically; backups are sent to object storage
  #   configured above)
  # - off-cluster: Run PostgreSQL outside the Kubernetes cluster (configure in database section)
  database_location: "on-cluster"

  # Set the location of Workflow's Registry
  #
  # Valid values are:
  # - on-cluster: Run registry within the Kubernetes cluster
  # - off-cluster: Use registry outside the Kubernetes cluster (example: dockerhub,quay.io,self-hosted)
  # - ecr: Use Amazon's ECR
  # - gcr: Use Google's GCR
  registry_location: "on-cluster"
  # The host port to which registry proxy binds to
  host_port: 5555
  # Prefix for the imagepull secret created when using private registry
  secret_prefix: "private-registry"
  # Clusters with large nodes (24 CPU+) may need to lower or tune the number of GUNICORN_WORKERS.
  #
  # Default value is based on your number of CPUs:
  # - (os.cpu_count() or 4) * 4 + 1
  # This setting probably should not be higher than max_connections which defaults to 100
  # gunicorn_workers: 13
  # If there are enough gunicorn workers to use up max_connections, you may also want to reduce CONN_MAX_AGE
  # so health checks time out their connection faster and don't use all available connections
  #
  # Valid values are a number of seconds, or 0 to disable persistent connections.
  # Setting the value to "None" will ensure that connections are never timed out.
  # - 0
  # - 600
  # - "None"
  # conn_max_age: 600
  # Feature to toggle using kubernetes ingress instead of the Deis router.
  #
  # Valid values are:
  # - true: The deis controller will now create Kubernetes ingress rules for each app, and ingress rules will automatically be created for the controller itself.
  # - false: The default mode, and the default behavior of Deis workflow.
  native_ingress: false
  # Role-Based Access Control for Kubernetes >= 1.5
  use_rbac: false
